generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE")
}

// Enums
enum SexEnum {
  M
  F
  N
}

enum StatusEnum {
  A // ativo
  I // inativo
  E // Expirado
  D // Deletado (soft delete)

  V // Vanished (hard delete)
  // ToDo: adicionar novos status posteriormente
}

// models

model WhiteLabel {
  id                 BigInt     @id() @unique() @default(autoincrement())
  slug               String     @unique() @default(uuid())
  created_at         DateTime   @default(now()) @db.Timestamptz(6)
  created_by_user_id BigInt?
  updated_at         DateTime?  @db.Timestamptz(6)
  updated_by_user_id BigInt?
  name               String
  status             StatusEnum @default(A)
  description        String?

  User_WhiteLabel User[] @relation(name: "User_WhiteLabel")

  @@index([status])
  @@index([name])
  @@map("ecodrive_whitelabel")
}

model User {
  id            BigInt     @id() @unique() @default(autoincrement())
  slug          String     @unique() @default(uuid())
  created_at    DateTime   @default(now()) @db.Timestamptz(6)
  name          String
  sex           SexEnum?
  login         String     @unique()
  status        StatusEnum @default(A)
  password      String
  email         String     @unique()
  whitelabel_id BigInt

  User_WhiteLabel    WhiteLabel      @relation(fields: [whitelabel_id], references: [id], name: "User_WhiteLabel")
  UserAuthToken_User UserAuthToken[] @relation(name: "UserAuthToken_User")

  @@index([login])
  @@index([status])
  @@index([email])
  @@map("ecodrive_user")
}

model UserAuthToken {
  id           BigInt     @id() @unique() @default(autoincrement())
  slug         String     @unique() @default(uuid())
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?  @db.Timestamptz(6)
  last_used_at DateTime?  @db.Timestamptz(6)
  created_ip   String
  last_used_ip String?
  status       StatusEnum @default(A)
  jwt_token    String
  jwt_secret   String
  keep         Boolean    @default(false)
  user_id      BigInt

  UserAuthToken_User User @relation(fields: [user_id], references: [id], name: "UserAuthToken_User")

  @@index([created_at])
  @@index([updated_at])
  @@index([last_used_at])
  @@index([jwt_token])
  @@index([jwt_secret])
  @@index([status])
  @@index([keep])
  @@map("ecodrive_user_auth_token")
}

/**
 * Observações
 */

// Quando uma nova tabela for criada rodar o migrate em 3 etapas:
// 1 > npx prisma migrate dev --name [NOME_AQUI] --schema ./prisma/schema.prisma --create-only
// 2 > [alterações manuais no migration file] 
// 3 > npx prisma migrate dev

// Quando nenhuma tabela for criada rodar o migrate em 1 etapa:
// 1 > npx prisma migrate dev --name [NOME_AQUI] --schema ./prisma/schema.prisma

// Quando for aplicar o migration em produção
// 1 > npx prisma migrate deploy
